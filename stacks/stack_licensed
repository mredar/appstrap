#!/usr/bin/env bash
export DEBUG=1
if [[ -n ${DEBUG-} ]]; then 
  set -x
fi

set -o pipefail  # trace ERR through pipes
set -o errtrace  # trace ERR through 'time command' and other functions
set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable
set -o errexit   ## set -e : exit the script if any statement returns a non-true return value

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" # http://stackoverflow.com/questions/59895
cd $DIR

. stack_run.sh  # gives us `stack_run_batch`
export LD_LIBRARY_PATH="${HOME}/pkg/lib:${HOME}/servers/shibboleth/lib"

. $DIR/../setenv.sh

# install pkgsrc packages
ACCEPTABLE_LICENSES=lame-license stack_run_batch "../pmake" licensed.pkgsrc.txt
../roll_test_certs
../cdl/get_java 
./monit_binary  # get new monit via binary distribution

if [[ ! -e ${HOME}/pkg/bin/python ]]; then
    ln -s ${HOME}/pkg/bin/python2.7 ${HOME}/pkg/bin/python
fi

easy_install-2.7 pip==1.2.1
pip install lxml
pip install twill
pip install netaddr
../jpache --prefix=${HOME}/java -f

# okay, now we should have a good stack set up, let's install and configure the app!
cd ../ansible
if [[ ! -d bin ]]; then
  ./init.sh
fi
set +u
. bin/activate
set -u
ansible-playbook -i host_inventory licensed-playbook.yml
cd
ln -f -s appstrap/bashrc/role-account .bashrc
